#!/bin/bash

# MongoDB Logrotate Configuration Script
# Sets up log rotation for all MongoDB nodes in the cluster

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="${SCRIPT_DIR}/../config/accounts.json"
LOG_FILE="/var/log/mongodb-logrotate-setup.log"

# Logging function
log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${timestamp} [${level}] ${message}" | tee -a "${LOG_FILE}"
}

log_info() {
    log "INFO" "${BLUE}$*${NC}"
}

log_warn() {
    log "WARN" "${YELLOW}$*${NC}"
}

log_error() {
    log "ERROR" "${RED}$*${NC}"
}

log_success() {
    log "SUCCESS" "${GREEN}$*${NC}"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root"
        exit 1
    fi
}

# Load configuration
load_config() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        log_error "Configuration file not found: $CONFIG_FILE"
        exit 1
    fi
    
    log_info "Loading configuration from $CONFIG_FILE"
}

# Setup MongoDB logrotate
setup_mongodb_logrotate() {
    log_info "Setting up MongoDB logrotate configuration..."
    
    # Extract log directory from config
    local log_dir
    log_dir=$(jq -r '.mongodb_cluster.directories.log_dir' "$CONFIG_FILE")
    
    if [[ "$log_dir" == "null" ]]; then
        log_dir="/var/log/mongodb"
    fi
    
    # Create logrotate configuration file
    cat > /etc/logrotate.d/mongodb << EOF
# MongoDB Log Rotation Configuration
# Generated by MongoDB cluster setup script

$log_dir/mongod.log {
    # Rotate daily
    daily
    
    # Keep 52 weeks of logs (1 year)
    rotate 52
    
    # Don't rotate empty files
    notifempty
    
    # Missing log files are ok
    missingok
    
    # Compress old logs
    compress
    
    # Don't compress the first rotated file
    delaycompress
    
    # Create new log file with specific permissions
    create 644 mongodb mongodb
    
    # Use shared scripts for all log files
    sharedscripts
    
    # Post-rotation script to signal MongoDB to reopen log files
    postrotate
        # Send SIGUSR1 to mongod process to rotate logs
        if [ -f /var/run/mongodb/mongod.pid ]; then
            /bin/kill -SIGUSR1 \$(cat /var/run/mongodb/mongod.pid 2>/dev/null) 2>/dev/null || true
        fi
        
        # Alternative method using systemctl
        if systemctl is-active --quiet mongod; then
            systemctl reload mongod || true
        fi
    endscript
}

# MongoDB slow query log (if enabled)
$log_dir/mongod-slow.log {
    daily
    rotate 30
    notifempty
    missingok
    compress
    delaycompress
    create 644 mongodb mongodb
    sharedscripts
    postrotate
        if [ -f /var/run/mongodb/mongod.pid ]; then
            /bin/kill -SIGUSR1 \$(cat /var/run/mongodb/mongod.pid 2>/dev/null) 2>/dev/null || true
        fi
    endscript
}

# MongoDB audit log (if enabled)
$log_dir/mongod-audit.log {
    daily
    rotate 90
    notifempty
    missingok
    compress
    delaycompress
    create 644 mongodb mongodb
    sharedscripts
    postrotate
        if [ -f /var/run/mongodb/mongod.pid ]; then
            /bin/kill -SIGUSR1 \$(cat /var/run/mongodb/mongod.pid 2>/dev/null) 2>/dev/null || true
        fi
    endscript
}
EOF
    
    log_success "MongoDB logrotate configuration created"
}

# Setup system logs rotation
setup_system_logrotate() {
    log_info "Setting up system logs rotation..."
    
    # Dashboard logs
    cat > /etc/logrotate.d/mongodb-dashboard << EOF
# MongoDB Dashboard Log Rotation
/var/log/mongodb-dashboard*.log {
    daily
    rotate 30
    notifempty
    missingok
    compress
    delaycompress
    create 644 root root
    postrotate
        # Restart dashboard if running
        if systemctl is-active --quiet mongodb-dashboard; then
            systemctl reload mongodb-dashboard || true
        fi
    endscript
}
EOF
    
    # Load testing logs
    cat > /etc/logrotate.d/mongodb-loadtest << EOF
# MongoDB Load Testing Log Rotation
/var/log/hr_data_generator.log {
    weekly
    rotate 12
    notifempty
    missingok
    compress
    delaycompress
    create 644 root root
}

/var/log/mongodb-cluster-install.log {
    weekly
    rotate 12
    notifempty
    missingok
    compress
    delaycompress
    create 644 root root
}

/var/log/mongodb-logrotate-setup.log {
    monthly
    rotate 12
    notifempty
    missingok
    compress
    delaycompress
    create 644 root root
}
EOF
    
    log_success "System logs rotation configured"
}

# Setup application-specific log rotation
setup_application_logrotate() {
    log_info "Setting up application-specific log rotation..."
    
    # Create log directories if they don't exist
    mkdir -p /var/log/mongodb-cluster/{load-testing,data-generator,deployment}
    chown -R mongodb:mongodb /var/log/mongodb-cluster
    
    # Application logs rotation
    cat > /etc/logrotate.d/mongodb-applications << EOF
# MongoDB Cluster Applications Log Rotation

# Load testing results and logs
/var/log/mongodb-cluster/load-testing/*.log {
    daily
    rotate 7
    notifempty
    missingok
    compress
    delaycompress
    create 644 mongodb mongodb
}

# Data generator logs
/var/log/mongodb-cluster/data-generator/*.log {
    weekly
    rotate 4
    notifempty
    missingok
    compress
    delaycompress
    create 644 mongodb mongodb
}

# Deployment logs
/var/log/mongodb-cluster/deployment/*.log {
    monthly
    rotate 6
    notifempty
    missingok
    compress
    delaycompress
    create 644 root root
}

# Performance monitoring logs
/var/log/mongodb-cluster/monitoring/*.log {
    daily
    rotate 30
    notifempty
    missingok
    compress
    delaycompress
    create 644 mongodb mongodb
}
EOF
    
    log_success "Application logs rotation configured"
}

# Test logrotate configuration
test_logrotate() {
    log_info "Testing logrotate configuration..."
    
    # Test MongoDB logrotate
    if logrotate -d /etc/logrotate.d/mongodb > /tmp/logrotate-test-mongodb.log 2>&1; then
        log_success "MongoDB logrotate configuration is valid"
    else
        log_error "MongoDB logrotate configuration has errors:"
        cat /tmp/logrotate-test-mongodb.log
        return 1
    fi
    
    # Test dashboard logrotate
    if logrotate -d /etc/logrotate.d/mongodb-dashboard > /tmp/logrotate-test-dashboard.log 2>&1; then
        log_success "Dashboard logrotate configuration is valid"
    else
        log_warn "Dashboard logrotate configuration has warnings:"
        cat /tmp/logrotate-test-dashboard.log
    fi
    
    # Test applications logrotate
    if logrotate -d /etc/logrotate.d/mongodb-applications > /tmp/logrotate-test-apps.log 2>&1; then
        log_success "Applications logrotate configuration is valid"
    else
        log_warn "Applications logrotate configuration has warnings:"
        cat /tmp/logrotate-test-apps.log
    fi
    
    # Clean up test files
    rm -f /tmp/logrotate-test-*.log
}

# Setup log monitoring and alerting
setup_log_monitoring() {
    log_info "Setting up log monitoring..."
    
    # Create log monitoring script
    cat > /usr/local/bin/mongodb-log-monitor.sh << 'EOF'
#!/bin/bash

# MongoDB Log Monitoring Script
# Monitors MongoDB logs for errors and sends alerts

MONGODB_LOG="/var/log/mongodb/mongod.log"
ALERT_EMAIL="${MONGODB_ALERT_EMAIL:-admin@localhost}"
TEMP_DIR="/tmp/mongodb-log-monitor"

# Create temp directory
mkdir -p "$TEMP_DIR"

# Check for critical errors in the last 5 minutes
check_critical_errors() {
    local since_time=$(date -d '5 minutes ago' '+%Y-%m-%dT%H:%M:%S')
    local error_count=0
    
    if [[ -f "$MONGODB_LOG" ]]; then
        # Look for critical errors
        error_count=$(grep -c "SEVERE\|FATAL\|ERROR" "$MONGODB_LOG" | tail -100 | wc -l)
        
        if [[ $error_count -gt 0 ]]; then
            echo "Found $error_count critical errors in MongoDB logs"
            
            # Extract recent errors
            tail -100 "$MONGODB_LOG" | grep "SEVERE\|FATAL\|ERROR" > "$TEMP_DIR/recent_errors.log"
            
            # Send alert (if mail is configured)
            if command -v mail &> /dev/null; then
                mail -s "MongoDB Critical Errors Detected" "$ALERT_EMAIL" < "$TEMP_DIR/recent_errors.log"
            fi
            
            return 1
        fi
    fi
    
    return 0
}

# Check disk space for log directory
check_disk_space() {
    local log_dir=$(dirname "$MONGODB_LOG")
    local usage=$(df "$log_dir" | awk 'NR==2 {print $5}' | sed 's/%//')
    
    if [[ $usage -gt 85 ]]; then
        echo "WARNING: Log directory disk usage is ${usage}%"
        return 1
    fi
    
    return 0
}

# Main monitoring function
main() {
    local exit_code=0
    
    if ! check_critical_errors; then
        exit_code=1
    fi
    
    if ! check_disk_space; then
        exit_code=1
    fi
    
    exit $exit_code
}

main "$@"
EOF
    
    chmod +x /usr/local/bin/mongodb-log-monitor.sh
    
    # Create systemd service for log monitoring
    cat > /etc/systemd/system/mongodb-log-monitor.service << EOF
[Unit]
Description=MongoDB Log Monitor
After=mongod.service

[Service]
Type=oneshot
ExecStart=/usr/local/bin/mongodb-log-monitor.sh
User=mongodb
Group=mongodb

[Install]
WantedBy=multi-user.target
EOF
    
    # Create systemd timer for periodic monitoring
    cat > /etc/systemd/system/mongodb-log-monitor.timer << EOF
[Unit]
Description=Run MongoDB Log Monitor every 5 minutes
Requires=mongodb-log-monitor.service

[Timer]
OnCalendar=*:0/5
Persistent=true

[Install]
WantedBy=timers.target
EOF
    
    # Enable and start the timer
    systemctl daemon-reload
    systemctl enable mongodb-log-monitor.timer
    systemctl start mongodb-log-monitor.timer
    
    log_success "Log monitoring configured and enabled"
}

# Setup log cleanup script
setup_log_cleanup() {
    log_info "Setting up log cleanup script..."
    
    cat > /usr/local/bin/mongodb-log-cleanup.sh << 'EOF'
#!/bin/bash

# MongoDB Log Cleanup Script
# Removes old log files and maintains disk space

LOG_DIRS=(
    "/var/log/mongodb"
    "/var/log/mongodb-cluster"
    "/workspace/mongodb-cluster/load-testing/load_test_results"
    "/workspace/mongodb-cluster/data-generator/dummy_files"
)

# Clean up old files (older than 90 days)
cleanup_old_files() {
    for dir in "${LOG_DIRS[@]}"; do
        if [[ -d "$dir" ]]; then
            echo "Cleaning up old files in $dir..."
            find "$dir" -type f -mtime +90 -name "*.log*" -delete
            find "$dir" -type f -mtime +90 -name "*.csv" -delete
            find "$dir" -type f -mtime +90 -name "*.json" -delete
            find "$dir" -type f -mtime +30 -name "*.png" -delete
            find "$dir" -type f -mtime +30 -name "*.jpg" -delete
            find "$dir" -type f -mtime +30 -name "*.pdf" -delete
        fi
    done
}

# Clean up empty directories
cleanup_empty_dirs() {
    for dir in "${LOG_DIRS[@]}"; do
        if [[ -d "$dir" ]]; then
            find "$dir" -type d -empty -delete 2>/dev/null || true
        fi
    done
}

# Main cleanup function
main() {
    echo "Starting MongoDB log cleanup..."
    cleanup_old_files
    cleanup_empty_dirs
    echo "Log cleanup completed"
}

main "$@"
EOF
    
    chmod +x /usr/local/bin/mongodb-log-cleanup.sh
    
    # Add to crontab for weekly execution
    (crontab -l 2>/dev/null; echo "0 2 * * 0 /usr/local/bin/mongodb-log-cleanup.sh >> /var/log/mongodb-cleanup.log 2>&1") | crontab -
    
    log_success "Log cleanup script configured"
}

# Main function
main() {
    log_info "Starting MongoDB logrotate setup..."
    
    check_root
    load_config
    
    setup_mongodb_logrotate
    setup_system_logrotate
    setup_application_logrotate
    test_logrotate
    setup_log_monitoring
    setup_log_cleanup
    
    log_success "MongoDB logrotate setup completed successfully!"
    
    echo
    echo "Logrotate Configuration Summary:"
    echo "================================"
    echo "✓ MongoDB logs: Daily rotation, 52 weeks retention"
    echo "✓ Dashboard logs: Daily rotation, 30 days retention"  
    echo "✓ Application logs: Weekly/Monthly rotation"
    echo "✓ Log monitoring: Every 5 minutes"
    echo "✓ Log cleanup: Weekly cleanup of old files"
    echo
    echo "Configuration files created:"
    echo "- /etc/logrotate.d/mongodb"
    echo "- /etc/logrotate.d/mongodb-dashboard"
    echo "- /etc/logrotate.d/mongodb-applications"
    echo "- /usr/local/bin/mongodb-log-monitor.sh"
    echo "- /usr/local/bin/mongodb-log-cleanup.sh"
    echo
    echo "To manually test log rotation:"
    echo "  sudo logrotate -f /etc/logrotate.d/mongodb"
    echo
    echo "To check log monitoring status:"
    echo "  systemctl status mongodb-log-monitor.timer"
}

# Trap errors
trap 'log_error "Script failed at line $LINENO"' ERR

# Run main function
main "$@"