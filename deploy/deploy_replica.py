#!/usr/bin/env python3
"""
Deploy a 3-node MongoDB replica-set described in ``accounts.json``.
The script is **idempotent** and safe to run multiple times.

Features
========
1. Installs the latest MongoDB Community Edition (v6.0) on Debian/Ubuntu hosts
2. Enables & configures replica-set ``--replSet`` name across all nodes
3. Copies a shared keyfile so that intra-cluster authentication works
4. Creates an ``admin`` user (username/pass can be overridden via CLI)
5. Installs a strict logrotate policy ``/etc/logrotate.d/mongod``
6. Starts & enables ``mongod`` as a systemd service

Requirements
------------
``paramiko`` for SSH + SCP, ``pymongo`` for cluster initiation.

Usage
-----
```bash
python deploy/deploy_replica.py --accounts accounts.json --replset rs0 \
       --admin-user admin --admin-pass StrongPass
```
"""
from __future__ import annotations

import argparse
import json
import os
import random
import string
import sys
import tempfile
import time
from pathlib import Path
from typing import List, Dict

import paramiko
from paramiko import SSHClient, AutoAddPolicy
from pymongo import MongoClient
from pymongo.errors import OperationFailure, ServerSelectionTimeoutError

SSH_TIMEOUT = 10  # seconds
MONGO_PORT = 27017
LOGROTATE_CONF = """/var/log/mongodb/*.log {
    daily
    rotate 7
    compress
    delaycompress
    missingok
    notifempty
    create 640 mongodb mongodb
    sharedscripts
    postrotate
        /bin/systemctl reload mongod.service > /dev/null 2>&1 || true
    endscript
}
"""

APT_REPO_SETUP = """sudo apt-get update -y && \
if ! command -v mongod > /dev/null 2>&1; then \
  wget -qO - https://pgp.mongodb.com/server-6.0.asc | sudo gpg --dearmor -o /usr/share/keyrings/mongodb-server-6.0.gpg && \
  echo "deb [ arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list && \
  sudo apt-get update -y && \
  sudo apt-get install -y mongodb-org; \
fi
"""

MONGOD_SERVICE_ENABLE = """sudo systemctl enable mongod && sudo systemctl restart mongod"""

MONGOD_CONF_TEMPLATE = """# mongod.conf generated by deploy_script
storage:
  dbPath: /var/lib/mongo
  journal:
    enabled: true
systemLog:
  destination: file
  path: /var/log/mongodb/mongod.log
  logAppend: true
processManagement:
  fork: false
net:
  port: 27017
  bindIp: 0.0.0.0
replication:
  replSetName: {replset}
security:
  authorization: enabled
  keyFile: /etc/mongod.keyfile
"""

def rand_key(length: int = 40) -> str:
    return "".join(random.SystemRandom().choice(string.ascii_letters + string.digits) for _ in range(length))


def ssh_connect(node: Dict) -> SSHClient:
    client = SSHClient()
    client.set_missing_host_key_policy(AutoAddPolicy())
    client.connect(node["ip"], port=node.get("port", 22), username=node["user"], password=node["password"], timeout=SSH_TIMEOUT)
    return client


def exec_cmd(client: SSHClient, cmd: str) -> str:
    stdin, stdout, stderr = client.exec_command(cmd)
    exit_status = stdout.channel.recv_exit_status()
    if exit_status != 0:
        raise RuntimeError(f"Command failed ({exit_status}): {cmd}\nSTDERR: {stderr.read().decode()}")
    return stdout.read().decode()


def ensure_mongodb(client: SSHClient):
    exec_cmd(client, APT_REPO_SETUP)


def push_file(client: SSHClient, local_path: Path, remote_path: str, mode: int = 0o600):
    sftp = client.open_sftp()
    try:
        sftp.put(str(local_path), remote_path)
        sftp.chmod(remote_path, mode)
    finally:
        sftp.close()


def configure_node(client: SSHClient, keyfile_content: str, replset: str):
    # 1. Ensure keyfile
    with tempfile.NamedTemporaryFile(delete=False) as tmp:
        tmp.write(keyfile_content.encode())
        tmp.flush()
        local_tmp = Path(tmp.name)
    try:
        push_file(client, local_tmp, "/etc/mongod.keyfile", 0o600)
    finally:
        local_tmp.unlink(missing_ok=True)

    # 2. Upload mongod.conf
    conf_str = MONGOD_CONF_TEMPLATE.format(replset=replset)
    with tempfile.NamedTemporaryFile(delete=False) as tmp:
        tmp.write(conf_str.encode())
        tmp.flush()
        local_conf = Path(tmp.name)
    try:
        push_file(client, local_conf, "/etc/mongod.conf", 0o644)
    finally:
        local_conf.unlink(missing_ok=True)

    # 3. Logrotate conf
    with tempfile.NamedTemporaryFile(delete=False) as tmp:
        tmp.write(LOGROTATE_CONF.encode())
        tmp.flush()
        local_lr = Path(tmp.name)
    try:
        push_file(client, local_lr, "/etc/logrotate.d/mongod", 0o644)
    finally:
        local_lr.unlink(missing_ok=True)

    # 4. Ensure service running
    exec_cmd(client, MONGOD_SERVICE_ENABLE)


def initiate_replica(primary_ip: str, members: List[str], replset: str, admin_user: str, admin_pass: str):
    uri = f"mongodb://{primary_ip}:{MONGO_PORT}/"
    client = MongoClient(uri, serverSelectionTimeoutMS=5000)
    try:
        client.admin.command("ping")
    except ServerSelectionTimeoutError as exc:
        print(f"Cannot connect to primary {primary_ip}: {exc}")
        sys.exit(1)

    cfg = {
        "_id": replset,
        "members": [{"_id": idx, "host": member} for idx, member in enumerate(members)],
    }
    try:
        client.admin.command("replSetInitiate", cfg)
    except OperationFailure as err:
        if "already initiated" in str(err):
            print("Replica-set already initiated – skipping.")
        else:
            raise

    # Wait for PRIMARY state
    for _ in range(10):
        status = client.admin.command("replSetGetStatus")
        primary = next(m for m in status["members"] if m["stateStr"] == "PRIMARY")
        if primary:
            break
        time.sleep(5)

    # Create admin user if not exists
    try:
        client.admin.add_user(admin_user, admin_pass, roles=["root"])
    except OperationFailure as err:
        if err.code == 51003 or "already exists" in str(err):
            print("Admin user exists – skipping create.")
        else:
            raise
    print("Replica-set initiation complete.")


def main():
    parser = argparse.ArgumentParser(description="Deploy MongoDB replica-set across multiple nodes")
    parser.add_argument("--accounts", required=True, help="Path to accounts.json")
    parser.add_argument("--replset", default="rs0", help="Replica-set name")
    parser.add_argument("--admin-user", default="admin")
    parser.add_argument("--admin-pass", default="StrongPass")
    args = parser.parse_args()

    accounts = json.loads(Path(args.accounts).read_text())
    keyfile_content = rand_key()

    # Step 1: Prepare all nodes
    for node in accounts:
        print(f"\n=== Processing {node['ip']} ({node['role']}) ===")
        client = ssh_connect(node)
        try:
            ensure_mongodb(client)
            configure_node(client, keyfile_content, args.replset)
        finally:
            client.close()

    # Step 2: Initiate replica-set from primary
    primary_ip = next(n["ip"] for n in accounts if n["role"] == "primary")
    member_hosts = [f"{n['ip']}:{MONGO_PORT}" for n in accounts]
    initiate_replica(primary_ip, member_hosts, args.replset, args.admin_user, args.admin_pass)

    print("\nAll nodes configured and replica-set running. ✨")


if __name__ == "__main__":
    main()